version: '3.8'

services:
  # DriftBuddy Web API
  driftbuddy-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: driftbuddy-api
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://driftbuddy:driftbuddy@db:5432/driftbuddy}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./reports:/app/reports
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: driftbuddy-db
    environment:
      - POSTGRES_DB=driftbuddy
      - POSTGRES_USER=driftbuddy
      - POSTGRES_PASSWORD=driftbuddy
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: driftbuddy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: driftbuddy-worker
    command: celery -A driftbuddy.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://driftbuddy:driftbuddy@db:5432/driftbuddy}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./reports:/app/reports
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: driftbuddy-beat
    command: celery -A driftbuddy.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://driftbuddy:driftbuddy@db:5432/driftbuddy}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: driftbuddy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - driftbuddy-api
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: driftbuddy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - driftbuddy-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: driftbuddy-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - driftbuddy-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  driftbuddy-network:
    driver: bridge
