#!/usr/bin/env python3
"""
DriftBuddy API Key Setup Script

This script helps users configure their OpenAI API key for DriftBuddy.
It provides multiple options for setting up the API key and validates the configuration.
"""

import os
import sys
from pathlib import Path
from typing import Optional


def get_user_input(prompt: str, default: str = "") -> str:
    """Get user input with optional default value."""
    if default:
        user_input = input(f"{prompt} [{default}]: ").strip()
        return user_input if user_input else default
    else:
        return input(f"{prompt}: ").strip()


def validate_api_key(api_key: str) -> bool:
    """Basic validation of OpenAI API key format."""
    if not api_key:
        return False

    # OpenAI API keys start with 'sk-' and are typically 51 characters long
    if not api_key.startswith("sk-"):
        return False

    if len(api_key) < 20:  # Minimum reasonable length
        return False

    return True


def setup_env_file() -> bool:
    """Set up .env file with API key."""
    env_file = Path(".env")

    print("\nüîß Setting up .env file...")

    # Check if .env already exists
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists")
        overwrite = get_user_input("Do you want to overwrite it? (y/N)", "N").lower()
        if overwrite != "y":
            print("‚ùå Setup cancelled")
            return False

    # Get API key from user
    api_key = get_user_input("Enter your OpenAI API key")

    if not validate_api_key(api_key):
        print("‚ùå Invalid API key format. OpenAI API keys should start with 'sk-'")
        return False

    # Create .env file content
    env_content = f"""# DriftBuddy Configuration
# Generated by setup_api_key.py

# OpenAI Configuration
OPENAI_API_KEY={api_key}

# AI Settings
ENABLE_AI_EXPLANATIONS=true
USE_DEMO_KEY_FALLBACK=true
OPENAI_MODEL=gpt-3.5-turbo
OPENAI_MAX_TOKENS=2000

# Output Configuration
REPORTS_DIR=outputs/reports
ANALYSIS_DIR=outputs/analysis

# Feature Flags
ENABLE_HTML_REPORTS=true
ENABLE_MARKDOWN_REPORTS=true

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json
"""

    try:
        with open(env_file, "w") as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False


def setup_environment_variable() -> bool:
    """Set up environment variable for current session."""
    print("\nüîß Setting up environment variable for current session...")

    api_key = get_user_input("Enter your OpenAI API key")

    if not validate_api_key(api_key):
        print("‚ùå Invalid API key format. OpenAI API keys should start with 'sk-'")
        return False

    # Set environment variable for current session
    os.environ["OPENAI_API_KEY"] = api_key

    print("‚úÖ Environment variable set for current session")
    print("üí° Note: This will only work for the current terminal session")
    print("   For permanent setup, use the .env file option")

    return True


def test_configuration() -> bool:
    """Test the current configuration."""
    print("\nüß™ Testing configuration...")

    # Check if API key is available
    api_key = os.getenv("OPENAI_API_KEY")

    if not api_key:
        print("‚ùå No API key found in environment")
        return False

    if not validate_api_key(api_key):
        print("‚ùå Invalid API key format")
        return False

    print("‚úÖ API key found and format is valid")

    # Try to import and test the configuration
    try:
        sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
        from src.driftbuddy.config import get_config

        config = get_config()
        test_key = config.settings.get_openai_api_key()

        if test_key:
            print("‚úÖ Configuration test passed")
            return True
        else:
            print("‚ùå Configuration test failed - no API key available")
            return False

    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not test configuration: {e}")
        print("   This is normal if DriftBuddy is not installed")
        return True
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False


def show_help():
    """Show help information."""
    print(
        """
üîë DriftBuddy API Key Setup

This script helps you configure your OpenAI API key for DriftBuddy.

Options:
1. Create .env file (recommended for permanent setup)
2. Set environment variable (temporary, current session only)
3. Test current configuration
4. Show help

Usage:
  python scripts/setup_api_key.py [option]

Examples:
  python scripts/setup_api_key.py env     # Create .env file
  python scripts/setup_api_key.py var     # Set environment variable
  python scripts/setup_api_key.py test    # Test configuration
"""
    )


def main():
    """Main function."""
    print("üîë DriftBuddy API Key Setup")
    print("=" * 40)

    # Check command line arguments
    if len(sys.argv) > 1:
        option = sys.argv[1].lower()

        if option in ["env", "envfile", ".env"]:
            success = setup_env_file()
            if success:
                test_configuration()
        elif option in ["var", "variable", "envvar"]:
            setup_environment_variable()
        elif option in ["test", "check"]:
            test_configuration()
        elif option in ["help", "h", "-h", "--help"]:
            show_help()
        else:
            print(f"‚ùå Unknown option: {option}")
            show_help()
        return

    # Interactive mode
    print("Choose an option:")
    print("1. Create .env file (recommended)")
    print("2. Set environment variable (temporary)")
    print("3. Test current configuration")
    print("4. Show help")
    print("5. Exit")

    while True:
        choice = get_user_input("\nEnter your choice (1-5)", "1")

        if choice == "1":
            success = setup_env_file()
            if success:
                test_configuration()
            break
        elif choice == "2":
            setup_environment_variable()
            break
        elif choice == "3":
            test_configuration()
            break
        elif choice == "4":
            show_help()
        elif choice == "5":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid choice. Please enter 1-5.")


if __name__ == "__main__":
    main()
