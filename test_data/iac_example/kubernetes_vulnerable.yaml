# Purposefully vulnerable Kubernetes configuration for testing
# This file contains multiple security flaws for demonstration

apiVersion: v1
kind: Pod
metadata:
  name: vulnerable-pod
  labels:
    app: vulnerable-app
spec:
  # CRITICAL: Running as root
  securityContext:
    runAsUser: 0  # CRITICAL: Running as root
    runAsGroup: 0  # CRITICAL: Running as root group
    fsGroup: 0  # CRITICAL: Root filesystem group
  containers:
  - name: vulnerable-container
    image: nginx:latest
    # CRITICAL: Privileged container
    securityContext:
      privileged: true  # CRITICAL: Privileged container
      allowPrivilegeEscalation: true  # CRITICAL: Allows privilege escalation
      readOnlyRootFilesystem: false  # CRITICAL: Writable root filesystem
      capabilities:
        add: ["ALL"]  # CRITICAL: All capabilities
    ports:
    - containerPort: 80
    # CRITICAL: No resource limits
    # resources:
    #   limits:
    #     memory: "128Mi"
    #     cpu: "500m"
    #   requests:
    #     memory: "64Mi"
    #     cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: vulnerable-service
spec:
  type: LoadBalancer  # HIGH: Exposes service to internet
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: vulnerable-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vulnerable-config
data:
  # HIGH: Sensitive data in ConfigMap
  database_url: "postgresql://admin:password123@db.example.com:5432/mydb"  # HIGH: Credentials in ConfigMap
  api_key: "sk-1234567890abcdef"  # HIGH: API key in ConfigMap
  secret_token: "my-super-secret-token-12345"  # HIGH: Secret token in ConfigMap
---
apiVersion: v1
kind: Secret
metadata:
  name: vulnerable-secret
type: Opaque
data:
  # MEDIUM: Base64 encoded but not encrypted
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQxMjM=  # password123
  api_key: c2stMTIzNDU2Nzg5MGFiY2RlZg==  # sk-1234567890abcdef
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulnerable-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vulnerable-app
  template:
    metadata:
      labels:
        app: vulnerable-app
    spec:
      # MEDIUM: No security context
      containers:
      - name: vulnerable-container
        image: nginx:latest
        # MEDIUM: No security context specified
        ports:
        - containerPort: 80
        env:
        # MEDIUM: Environment variables with sensitive data
        - name: DB_PASSWORD
          value: "password123"  # MEDIUM: Password in env var
        - name: API_KEY
          value: "sk-1234567890abcdef"  # MEDIUM: API key in env var
        - name: DEBUG
          value: "true"  # MEDIUM: Debug mode enabled
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vulnerable-network-policy
spec:
  podSelector:
    matchLabels:
      app: vulnerable-app
  # MEDIUM: Overly permissive network policy
  ingress:
  - {}  # MEDIUM: Allows all ingress traffic
  egress:
  - {}  # MEDIUM: Allows all egress traffic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vulnerable-role
rules:
# HIGH: Overly permissive role
- apiGroups: [""]
  resources: ["*"]  # HIGH: All resources
  verbs: ["*"]  # HIGH: All verbs
- apiGroups: ["*"]
  resources: ["*"]  # HIGH: All API groups
  verbs: ["*"]  # HIGH: All verbs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vulnerable-cluster-role
rules:
# CRITICAL: Cluster-wide admin permissions
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vulnerable-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: vulnerable-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vulnerable-service-account
  # LOW: No annotations for security
  # annotations:
  #   eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/my-role
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vulnerable-pvc
spec:
  accessModes:
    - ReadWriteMany  # MEDIUM: Shared access mode
  resources:
    requests:
      storage: 1Gi
  # MEDIUM: No storage class specified
  # storageClassName: encrypted-storage
---
apiVersion: v1
kind: Pod
metadata:
  name: hostpath-pod
spec:
  containers:
  - name: hostpath-container
    image: nginx:latest
    volumeMounts:
    - name: host-volume
      mountPath: /host
  volumes:
  - name: host-volume
    hostPath:
      path: /  # HIGH: Mounts entire host filesystem
      type: Directory
---
apiVersion: v1
kind: Pod
metadata:
  name: host-network-pod
spec:
  # HIGH: Uses host network
  hostNetwork: true  # HIGH: Uses host network
  hostPID: true  # HIGH: Uses host PID namespace
  hostIPC: true  # HIGH: Uses host IPC namespace
  containers:
  - name: host-network-container
    image: nginx:latest
    ports:
    - containerPort: 80
      hostPort: 8080  # HIGH: Binds to host port 